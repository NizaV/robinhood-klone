[{"/Users/nizavera/robinhood-klone/src/reportWebVitals.js":"1","/Users/nizavera/robinhood-klone/src/Header.js":"2","/Users/nizavera/robinhood-klone/src/LineGraph.js":"3","/Users/nizavera/robinhood-klone/src/App.js":"4","/Users/nizavera/robinhood-klone/src/Stats.js":"5","/Users/nizavera/robinhood-klone/src/index.js":"6","/Users/nizavera/robinhood-klone/src/StatsRow.js":"7","/Users/nizavera/robinhood-klone/src/firebase.js":"8"},{"size":362,"mtime":1606679117513,"results":"9","hashOfConfig":"10"},{"size":1223,"mtime":1612407464766,"results":"11","hashOfConfig":"10"},{"size":2711,"mtime":1611098714733,"results":"12","hashOfConfig":"10"},{"size":464,"mtime":1610372677510,"results":"13","hashOfConfig":"10"},{"size":3273,"mtime":1612715934892,"results":"14","hashOfConfig":"10"},{"size":504,"mtime":1610329770520,"results":"15","hashOfConfig":"10"},{"size":793,"mtime":1612659721460,"results":"16","hashOfConfig":"10"},{"size":642,"mtime":1612715130371,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1cd3583",{"filePath":"20","messages":"21","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nizavera/robinhood-klone/src/reportWebVitals.js",[],"/Users/nizavera/robinhood-klone/src/Header.js",["37","38","39","40","41","42"],"/Users/nizavera/robinhood-klone/src/LineGraph.js",["43"],"import React, {useEffect, useState} from 'react'\nimport {Line} from 'react-chartjs-2'\nimport './css/Linegraph.css'\n\nfunction LineGraph() {\n\n    const [ graphData, setGraphData ] = useState([]);\n    const data= [\n        {\n            x: 10,\n            y: 50\n        },\n        {\n            x: 25,\n            y: 10\n        },\n        {\n            x: 12,\n            y: 30\n        }\n    ]\n\n    const createTestData = () => {\n        let data = [];\n        let value = 50;\n        for(var i = 0; i < 366; i++){\n        let date = new Date();\n        date.setHours(0,0,0,0);\n        date.setDate(i);\n        value += Math.round((Math.random() < 0.5 ? 1 : 0) * Math.random() * 10);\n        data.push({x: date, y: value});\n    }\n    setGraphData(data);\n    }\n    useEffect(() => {\n        createTestData();\n    }, [])\n\n    return (\n        <div className=\"linegraph\">\n            <Line\n                data={{\n                    datasets: [\n                        {\n                            type: \"line\",\n                            data: graphData,\n                            backgroundColor: \"black\",\n                            borderColor: \"#5AC53B\",\n                            borderWidth: 2,\n                            pointBorderColor: 'rgba(0, 0, 0, 0)',\n                            pointBackgroundColor: 'rgba(0, 0, 0, 0)',\n                            pointHoverBackgroundColor: \"#5AC53B\",\n                            pointHoverBorderColor: \"#000000\",\n                            pointHoverBorderWidth: 4,\n                            pointHoverRadius: 6,\n                        }\n                    ]\n                }}\n                options={{\n                    maintainAspectRatio: false,\n                    legend: {\n                        display: false\n                    },\n                    tooltips: {\n                        mode: \"index\",\n                        intersect: false\n                    },\n                    scales: {\n                        xAxes: [\n                            {\n                              type: \"time\",\n                              time: {\n                                format: \"MM/DD/YY\",\n                                tooltipFormat: \"ll\",\n                              },\n                              ticks: {\n                                display: false,\n                              }\n                            },\n                          ],\n                        yAxes: [{\n                            ticks: {\n                                display: false\n                            }\n                        }]\n                    }\n                }}\n            />\n        </div>\n    )\n}\n\nexport default LineGraph\n","/Users/nizavera/robinhood-klone/src/App.js",[],"/Users/nizavera/robinhood-klone/src/Stats.js",["44","45","46"],"/Users/nizavera/robinhood-klone/src/index.js",[],["47","48"],"/Users/nizavera/robinhood-klone/src/StatsRow.js",["49"],"import React from 'react'\nimport './css/StatsRow.css'\nimport StockSVG from './images/stock.svg'\n\nfunction StatsRow(props) {\n    const percentage = ((props.price - props.openPrice)/props.openPrice) * 100;\n\n    return (\n        <div className=\"row\">\n            <div className=\"row__intro\">\n                <h1>{props.name}</h1>\n                <p>{props.volume && (props.shares + \"shares\")}</p>\n            </div>\n            <div className=\"row__chart\">\n                <img src={StockSVG} height={16} />\n            </div>\n            <div className=\"row__numbers\">\n                <p className=\"row__price\">{props.price}</p>\n                <p className=\"row__percentage\">+{Number(percentage).toFixed(2)}%</p>\n\n            </div>\n            \n        </div>\n    )\n}\n\nexport default StatsRow\n","/Users/nizavera/robinhood-klone/src/firebase.js",[],{"ruleId":"50","severity":1,"message":"51","line":21,"column":17,"nodeType":"52","endLine":21,"endColumn":46},{"ruleId":"53","severity":1,"message":"54","line":32,"column":17,"nodeType":"52","endLine":32,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":33,"column":17,"nodeType":"52","endLine":33,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":34,"column":17,"nodeType":"52","endLine":34,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":35,"column":17,"nodeType":"52","endLine":35,"endColumn":29},{"ruleId":"53","severity":1,"message":"54","line":36,"column":17,"nodeType":"52","endLine":36,"endColumn":29},{"ruleId":"55","severity":1,"message":"56","line":8,"column":11,"nodeType":"57","messageId":"58","endLine":8,"endColumn":15},{"ruleId":"59","severity":1,"message":"60","line":23,"column":37,"nodeType":"61","messageId":"62","endLine":23,"endColumn":39},{"ruleId":"59","severity":1,"message":"60","line":53,"column":32,"nodeType":"61","messageId":"62","endLine":53,"endColumn":34},{"ruleId":"63","severity":1,"message":"64","line":69,"column":8,"nodeType":"65","endLine":69,"endColumn":10,"suggestions":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"50","severity":1,"message":"51","line":15,"column":17,"nodeType":"52","endLine":15,"endColumn":51},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","no-unused-vars","'data' is assigned a value but never used.","Identifier","unusedVar","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getMyStocks'. Either include it or remove the dependency array.","ArrayExpression",["71"],"no-native-reassign",["72"],"no-negated-in-lhs",["73"],{"desc":"74","fix":"75"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [getMyStocks]",{"range":"76","text":"77"},[1847,1849],"[getMyStocks]"]